#include <Arduino.h>
#include "BalloonRide.h"

/*
 * Handle commands arriving from the serial console or through the satellite modem
 */

void showCommands()
{
  log(F("Console commands:\r\n"));
  log(F("\r\n"));
  log(F("  WATCH [all|none|telemetry|iridium|runlog]\r\n"));
  log(F("  TYPE telemetry|iridium|runlog\r\n"));
  log(F("\r\n"));
  log(F("Remote commands:\r\n"));
  log(F("\r\n"));
  log(F("Syntax is dddCxxx,yyy where\r\n"));
  log(F("    ddd is an optional deferral in minutes (default=0)\r\n"));
  log(F("    C is the command to execute\r\n"));
  log(F("    xxx is arg1\r\n"));
  log(F("    yyy is arg2\r\n"));
  log(F("\r\n"));
  log(F(" CMD  Name                 Arg1                       Arg2\r\n"));
  log(F(" ---  -------------------- -------------------------- ----------------\r\n"));
  log(F("  B   request Burst        dur(s) (opt, def=10)       N/A\r\n"));
  log(F("  A   set target Altitude  target(m) (opt, def=none)  N/A\r\n"));
  log(F("  M   execute Macro        macro#    N/A              N/A\r\n"));
  log(F("  P   take Picture         repeat interval(min) (opt, def=none)\r\n"));
  log(F("  V   take Video           dur(s)    infinite         N/A\r\n"));
  log(F("  I   request Info packet  0=Primary, 1=Secondary\r\n"));
  log(F("  C   change Cadence       0=Gnd, 1=Flt, 2=Lnd, 3=sec interval (min)\r\n"));
  log(F("\r\n"));
}

/* These are functions hardware designers should implement */
static void BurstStart()
{
  log(F("Burst Start\r\n"));
  /* TODO */
}

static void BurstEnd()
{
  log(F("Burst End\r\n"));
  /* TODO */
}

static void MaintainAltitude(unsigned long target, unsigned long current)
{
  log(F("Maintain Altitude target = %lu, current = %lu\r\n"), target, current);
  /* TODO */
}

static void StartPicture()
{
  log(F("Start Picture\r\n"));
  /* TODO */
}

static void EndPicture()
{
  log(F("End Picture\r\n"));
  /* TODO */
}

static void StartVideo()
{
  log(F("Start Video\r\n"));
  /* TODO */
}

static void EndVideo()
{
  log(F("End Video\r\n"));
  /* TODO */
}

static void Macro(int n)
{
  log(F("Macro %d\r\n"), n);
  /* TODO */
}

/* End These are functions hardware designers should implement */

enum { BURSTSTART, BURSTEND, PICTURESTART, PICTUREEND, VIDEOSTART, VIDEOEND, MACRO };
struct SCHEDULEINFO
{
  time_t timestamp;
  int command;
  unsigned long arg1;
  unsigned long arg2;
};

#define TABLESIZE 8
struct SCHEDULEINFO events[TABLESIZE];
static const unsigned long ULONG_MAX = 0xFFFFFFFF;
static unsigned long target_altitude = ULONG_MAX;
void FeedScheduler()
{
  if (target_altitude != ULONG_MAX)
    MaintainAltitude(target_altitude, getGPSInfo().altitude);
 
}

static void AddToScheduler(time_t timestamp, int command, unsigned long arg1, unsigned long arg2)
{
  int open = -1;
  for (int i=0; i<TABLESIZE; ++i)
  {
    if (open == -1 && events[i].timestamp == 0)
      open = i;
    if (events[i].command == command)
    {
      open = i;
      break;
    }
  }

  events[open].timestamp = timestamp;
  events[open].command = command;
  events[open].arg1 = arg1;
  events[open].arg2 = arg2;
}

#if false
static void ParseBurst(char *p)
{
  log(F("Processing Burst command %s\r\n"), p);
  int parameter = 0;
  if (strlen(p) >= 2)
  {
    parameter = (int)strtoul(p + 1, NULL, 10);
  }
  
  // TODO
}


static void ParseAltitude(char *p)
{
  log(F("Processing Altitude command %s\r\n"), p);
  // TODO
}

static void Descend(char *p)
{
  log(F("Processing Descend command %s\r\n"), p);
  // TODO
}

/*
 * Commands to change the cadence at which primary or secondary info packets are transmitted from the balloon to the ground
 */

static void Cadence(char *p)
{
  log(F("Processing Cadence command %s\r\n"), p);
  if (strlen(p) >= 3)
  {
    uint16_t interval = (uint16_t)strtoul(p + 2, NULL, 10);
    switch(p[1])
    {
      case 'G':
        setGroundInterval(interval);
        break;
      case 'F':
        setFlightInterval(interval);
        break;
      case 'L':
        setPostLandingInterval(interval);
        break;
      case 'S':
        setSecondaryInterval(interval);
        break;
    }
  }
}

static void Image(char *p)
{
  log(F("Processing Image command %s\r\n"), p);
  // TODO
}

static void Video(char *p)
{
  log(F("Processing Video command %s\r\n"), p);
  // TODO
}
#endif

/*
 * Handle commands arriving from the serial console (watch/type)
 */

bool executeConsoleCommand(char *cmd)
{
  log(F("Executing command: '%s'\r\n"), cmd);
  
  char *p = cmd;
  char *tok1 = strsep(&p, " ");
  char *tok2 = strsep(&p, " ");
  char *errortok = NULL;

  if (!stricmp(tok1, "watch"))
  {
    if (!stricmp(tok2, "telemetry"))
      setConsoleViewFlags(LOG_TELEMETRY);
    else if (!stricmp(tok2, "iridium"))
      setConsoleViewFlags(LOG_IRIDIUM);
    else if (!stricmp(tok2, "runlog"))
      setConsoleViewFlags(LOG_RUNLOG);
    else if (!stricmp(tok2, "none"))
      setConsoleViewFlags(0);
    else if (!stricmp(tok2, "all"))
      setConsoleViewFlags(LOG_TELEMETRY | LOG_IRIDIUM | LOG_RUNLOG);
    else if (tok2 && strlen(tok2) > 0)
      errortok = tok2;
    else // no argument
    {
      if (getConsoleViewFlags() == 0)
        log("NONE");
      if (getConsoleViewFlags() & LOG_TELEMETRY)
        log("TELEMETRY ");
      if (getConsoleViewFlags() & LOG_IRIDIUM)
        log("IRIDIUM ");
      if (getConsoleViewFlags() & LOG_RUNLOG)
        log("RUNLOG");
      log("\r\n");
    }
  }

  else if (!stricmp(tok1, "type"))
  {
    if (!stricmp(tok2, "telemetry"))
      showLog(LOG_TELEMETRY);
    else if (!stricmp(tok2, "iridium"))
      showLog(LOG_IRIDIUM);
    else if (!stricmp(tok2, "runlog"))
      showLog(LOG_RUNLOG);
    else
      errortok = tok2;
  }

  if (errortok)
  {
    log(F("Unknown console command: '%s'. Trying remote.\r\n"), errortok);
    return executeRemoteCommand(tok1);
  }

  else
  {
    return true;
  }
}

bool executeRemoteCommand(char *cmd)
{
  char cpy[sizeof(IridiumInfo::receiveBuffer)];
  strncpy(cpy, cmd, sizeof(cpy));
  char *errortok = NULL;
  for (char *p = cpy; p != NULL && *p && errortok == NULL;)
  {
    char *tok = strsep(&p, ";");
    unsigned long defer = 0;
    char command;
    unsigned long arg1 = ULONG_MAX;
    unsigned long arg2 = ULONG_MAX;

    // Prefaced with "defer" value (minutes)?
    if (isdigit(*tok))
    {
      defer = strtoul(tok, &tok, 10);
    }
    command = *tok++;
    if (isdigit(*tok))
    {
      arg1 = (unsigned)strtoul(tok, &tok, 10);
    }

    if (*tok == ',' && isdigit(*++tok))
    {
      arg2 = (unsigned)strtoul(tok, &tok, 10);
    }

    time_t exectime = getGPSTime();
    if (exectime == (time_t)-1)
      return false;

    exectime += defer;

    switch(command)
    {
      case 'B':
        AddToScheduler(exectime, BURSTSTART, 0, 0);
        AddToScheduler(exectime + (arg1 == ULONG_MAX ? 10 : arg1), BURSTEND, 0, 0);
        break;
      case 'A':
        target_altitude = arg1;
        break;
      case 'M':
        AddToScheduler(exectime, MACRO, arg1, 0);
        break;
      case 'P':
        log(F("Processing Primary command %s\r\n"), tok);
        requestPrimaryInfo();
        break;
      case 'V':
        log(F("Processing Secondary command %s\r\n"), tok);
        requestSecondaryInfo();
        break;
      case 'I':
        if (arg1 == 1)
          requestSecondaryInfo();
        else
          requestPrimaryInfo();
        break;
      case 'C':
        Cadence(tok);
        break;
      default:
        log(F("Unknown command '%s'\r\n"), tok);
        return false;
    }
  }

  if (errortok != NULL)
  {
    log(F("Command error: %s\r\n"), errortok);
    return false;
  }
  log(F("Command complete\r\n"));
  return true;
}
